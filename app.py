from flask import Flask, render_template, request, redirect, url_for, send_file
import io
import time
import random
from agents import DataAgent, AnalyticsAgent, VisualizationAgent, InsightAgent, ReportAgent # Import your agents!

app = Flask(__name__)
DATA_FILE = 'data/sales_data.csv'
TEMP_DATA = {} # Global dict to hold data across requests

# --- Custom Styling for Professional Look ---
def get_status_color(msg):
    if "✅" in msg: return "text-success"
    if "Agent Log" in msg: return "text-primary"
    if "❌" in msg: return "text-danger"
    return "text-secondary"

app.jinja_env.globals.update(get_status_color=get_status_color)

# --- Orchestration Route ---
@app.route('/run_automation')
def run_automation():
    # 1. Start Orchestration
    log = []
    
    # ----------------------------------------------
    # IBM watsonx Orchestration Flow Simulation
    # ----------------------------------------------
    
    # Agent 1: DataAgent
    try:
        log.append("Agent Log: Starting workflow: Sales Report Automation.")
        time.sleep(0.5)
        df = DataAgent(DATA_FILE)
        TEMP_DATA['df'] = df
        log.append("✅ DataAgent: Data read, cleaned, and stored successfully.")
    except Exception as e:
        log.append(f"❌ DataAgent Failed: Error reading data. {e}")
        return render_template('dashboard.html', log=log, developed_by="P. Sai Deepak")
        
    # Agent 2: AnalyticsAgent
    time.sleep(1)
    kpis = AnalyticsAgent(df)
    TEMP_DATA['kpis'] = kpis
    log.append("✅ AnalyticsAgent: Core KPIs (Sales, Growth, Profit) calculated.")
    
    # Agent 3: VisualizationAgent
    time.sleep(1)
    charts_data = VisualizationAgent(df)
    TEMP_DATA['charts_data'] = charts_data
    log.append("✅ VisualizationAgent: Charts generated and encoded for dashboard.")
    
    # Agent 4: InsightAgent (AI Step)
    time.sleep(1)
    insight = InsightAgent(df, kpis)
    TEMP_DATA['insight'] = insight
    log.append("✅ InsightAgent: AI Summary generated for business insights.")

    # Agent 5: ReportAgent (Final Step)
    time.sleep(0.5)
    final_message = ReportAgent()
    log.append(f"✅ ReportAgent: {final_message}")
    
    return render_template('dashboard.html', 
                           log=log, 
                           kpis=kpis, 
                           charts_data=charts_data, 
                           insight=insight, 
                           developed_by="P. Sai Deepak")

# --- Dashboard View ---
@app.route('/')
@app.route('/dashboard')
def dashboard():
    # Initial load state
    return render_template('dashboard.html', 
                           kpis=TEMP_DATA.get('kpis'),
                           charts_data=TEMP_DATA.get('charts_data'), 
                           insight=TEMP_DATA.get('insight'),
                           log=TEMP_DATA.get('log', ["Workflow Ready. Click 'Start Automation' to run the AI Agents."]),
                           developed_by="P. Sai Deepak")

# --- Report Download ---
@app.route('/download_report')
def download_report():
    if 'df' not in TEMP_DATA:
        return redirect(url_for('dashboard'))

    # Create a simple report file that includes KPIs and AI insight
    output = io.StringIO()
    output.write("--- AI-Powered Sales Automation Report ---\n\n")
    output.write(f"Generated by Agentic AI System (watsonx Inspired)\n")
    output.write(f"Date: {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
    output.write("KEY PERFORMANCE INDICATORS:\n")
    for k, v in TEMP_DATA['kpis'].items():
        if k != 'Sales Growth':
             output.write(f"- {k.replace('_', ' ').title()}: {v}\n")
    
    output.write("\n\nAI INSIGHT SUMMARY:\n")
    output.write(TEMP_DATA['insight'].replace('**', '')) # Remove markdown for TXT file
    
    # Send the file to the user
    return send_file(
        io.BytesIO(output.getvalue().encode()),
        mimetype='text/csv',
        as_attachment=True,
        download_name='AI_Sales_Report.txt'
    )

if __name__ == '__main__':
    print("Project Ready! Navigate to http://127.0.0.1:5000")
    app.run(debug=True)